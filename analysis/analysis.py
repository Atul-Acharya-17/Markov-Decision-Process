# -*- coding: utf-8 -*-
"""analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uFm3axS5x1iShKEazluSjFwfxSP4_jUV
"""

!pip install plotly>=4.0.0
!wget https://github.com/plotly/orca/releases/download/v1.2.1/orca-1.2.1-x86_64.AppImage -O /usr/local/bin/orca
!chmod +x /usr/local/bin/orca
!apt-get install xvfb libgtk2.0-0 libgconf-2-4

"""# Impot libraries"""

import numpy as np
import pandas as pd
import plotly.graph_objects as go

"""---

# Analysis of Value Iteration when C = 0.1
"""

VI_data = pd.read_csv('value_iteration.csv')

VI_data.head()

VI_data.tail()

VI_data.shape

"""### Interative plot of utilities of every state vs iterations"""

x = np.linspace(1, VI_data.shape[0], VI_data.shape[0])

fig = go.Figure()

for state in VI_data:
  fig.add_trace(go.Scatter(x=x, y=VI_data[state],
                    mode='lines',
                    name=state))
  
fig.update_layout(legend=dict(
    orientation="h",
    yanchor="bottom",
    y=1.02,
    xanchor="right",
    x=1
))

fig.show()

"""### Static plot of utilities of every state vs iterations"""

x = np.linspace(1, VI_data.shape[0], VI_data.shape[0])

fig = go.Figure()

for state in VI_data:
  fig.add_trace(go.Scatter(x=x, y=VI_data[state],
                    mode='lines',
                    name=state))
  
fig.update_layout(
    legend=dict(
    orientation="h",
    yanchor="bottom",
    y=1.02,
    xanchor="right",
    x=1,
))
fig.show("png")
fig.write_image("value_iteration_plot.png")

"""---

#Analysis of Value Iteration when C = 45
"""

VI_data_best = pd.read_csv('value_iteration_best.csv')

"""### Interative plot of utilities of every state vs iterations"""

x = np.linspace(1, VI_data.shape[0], VI_data.shape[0])

fig = go.Figure()

for state in VI_data_best:
  fig.add_trace(go.Scatter(x=x, y=VI_data_best[state],
                    mode='lines',
                    name=state))
  
fig.update_layout(legend=dict(
    orientation="h",
    yanchor="bottom",
    y=1.02,
    xanchor="right",
    x=1
))

fig.show()

"""### Static plot of utilities of every state vs iterations"""

x = np.linspace(1, VI_data.shape[0], VI_data.shape[0])

fig = go.Figure()

for state in VI_data_best:
  fig.add_trace(go.Scatter(x=x, y=VI_data_best[state],
                    mode='lines',
                    name=state))
  
fig.update_layout(
    legend=dict(
    orientation="h",
    yanchor="bottom",
    y=1.02,
    xanchor="right",
    x=1,
))
fig.show("png")
fig.write_image("value_iteration_plot_best.png")

"""---

# Analysis of Policy Iteration when k = 100
"""

PI_data = pd.read_csv('policy_iteration.csv')

PI_data.head()

PI_data.tail()

PI_data.shape

"""### Interactive plot of utilities of every state vs iterations"""

x = np.linspace(1, PI_data.shape[0], PI_data.shape[0])

fig = go.Figure()

for state in PI_data:
  fig.add_trace(go.Scatter(x=x, y=PI_data[state],
                    mode='lines',
                    name=state))
  
fig.update_layout(legend=dict(
    orientation="h",
    yanchor="bottom",
    y=1.02,
    xanchor="right",
    x=1
))

fig.show()

"""### Static plot of utilities of every state vs iterations"""

x = np.linspace(1, PI_data.shape[0], PI_data.shape[0])

fig = go.Figure()

for state in PI_data:
  fig.add_trace(go.Scatter(x=x, y=PI_data[state],
                    mode='lines',
                    name=state))
  
fig.update_layout(legend=dict(
    orientation="h",
    yanchor="bottom",
    y=1.02,
    xanchor="right",
    x=1
))

fig.show("png")
fig.write_image("policy_iteration_plot.png")

"""---

# Analysis of Policy Iteration when k = 10
"""

PI_data_best = pd.read_csv('policy_iteration_best.csv')

"""### Interactive plot of utilities of every state vs iterations"""

x = np.linspace(1, PI_data.shape[0], PI_data.shape[0])

fig = go.Figure()

for state in PI_data_best:
  fig.add_trace(go.Scatter(x=x, y=PI_data_best[state],
                    mode='lines',
                    name=state))
  
fig.update_layout(legend=dict(
    orientation="h",
    yanchor="bottom",
    y=1.02,
    xanchor="right",
    x=1
))

fig.show()

"""### Static plot of utilities of every state vs iterations"""

x = np.linspace(1, PI_data.shape[0], PI_data.shape[0])

fig = go.Figure()

for state in PI_data_best:
  fig.add_trace(go.Scatter(x=x, y=PI_data_best[state],
                    mode='lines',
                    name=state))
  
fig.update_layout(legend=dict(
    orientation="h",
    yanchor="bottom",
    y=1.02,
    xanchor="right",
    x=1
))

fig.show("png")
fig.write_image("policy_iteration_plot_best.png")

